[tool.poetry]
name = "qqmusic-api-python"
version = "0.1.0"
description = "QQ音乐API封装库"
authors = ["Luren <dluren.c@gmail.com>"]
packages = [{ include = "qqmusic_api" }]
license = "MIT"
readme = "README.md"
maintainers = ["Luren <dluren.c@gmail.com>"]
homepage = "https://github.com/luren-dc/QQMusicApi"
repository = "https://github.com/luren-dc/QQMusicApi"
documentation = "https://github.com/luren-dc/QQMusicApi"
keywords = ["music", "api", "qqmusic", "tencentmusic"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Natural Language :: Chinese (Simplified)",
  "License :: OSI Approved :: MIT License",
  "Framework :: Pytest",
  "Framework :: aiohttp",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.dependencies]
python = "^3.9"
cryptography = "^41.0.2"
requests = "^2.31.0"
aiohttp = "^3.9.5"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.6"
qrcode = { extras = ["pil"], version = "^7.4.2" }
pyzbar = "^0.1.9"
pytest-timeout = "^2.3.1"
pytest-sugar = "^1.0.0"
pre-commit = "^3.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
disable_error_code = ["index", "arg-type", "union-attr", "return-value"]
pretty = true
show_column_numbers = true

[tool.pytest.ini_options]
pythonpath = "./"
timeout = 30
testpaths = ["tests"]

[tool.git-cliff.changelog]
# changelog header
header = """
# Changelog\n
"""
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

### Details\

{% for group, commits in commits | group_by(attribute="group") %}
    #### {{ group | upper_first }}
    {%- for commit in commits %}
        - {{ commit.message | upper_first | trim }}\
            {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
            {% if commit.github.pr_number %} in \
              [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
            {%- endif -%}
    {% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n
"""
# template for the changelog footer
footer = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous and release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                {{ self::remote_url() }}/compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        {% if release.previous and release.previous.version -%}
            [unreleased]: {{ self::remote_url() }}/compare/{{ release.previous.version }}..HEAD
        {% else -%}
            [unreleased]: {{ self::remote_url() }}/compare/HEAD
        {% endif -%}
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # remove issue numbers from commits
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features --- 特性" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes --- Bug 修复" },
  { message = "^doc|^docs", group = "<!-- 3 -->📚 Documentation --- 文档" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance --- 性能优化" },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor --- 代码重构" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling --- 样式" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing --- 测试" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
#skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
