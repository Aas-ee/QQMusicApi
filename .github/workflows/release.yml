name: Release And Publish Python Package

on:
  push:
    branches:
      - "main"

permissions:
  contents: write
  packages: write

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}
      - name: Generate release-notes
        id: git-cliff
        uses: orhun/git-cliff-action@v4
        env:
          OUTPUT: docs/release-notes.md
      - name: Commit
        run: |
          git checkout main
          git config user.name 'github-actions[bot]'
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          set +e docs/release-notes.md
          git add docs/release-notes.md
          git commit -m "chore(release-notes): Update release notes"
          git push https://${{ secrets.GH_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git main

  generate-release-body:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'chore(release)')
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate release body
        id: git-cliff
        uses: orhun/git-cliff-action@v4
        with:
          args: -vv --unreleased --strip all

  publish:
    runs-on: ubuntu-latest
    environment: release
    needs: [generate-release-body]
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: 3.12
      - name: Install dependencies
        run: |
          pdm install
      - name: mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")
          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")
          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"
          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
      - name: Build and publish
        env:
          PYPI_TOKEN: ${{ steps.mint-token.outputs.api-token }}
        run: |
          pdm build
          pdm publish --username __token__ --password $PYPI_TOKEN

  release:
    runs-on: ubuntu-latest
    needs: [generate-changelog, generate-release-body, publish]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup PDM
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: 3.12
      - name: Get version
        run: |
          echo PACKAGE_VERSION=`pdm show --version` >> $GITHUB_ENV
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          body: ${{ needs.generate-release-body.outputs.release_body }}
          tag: v${{ env.PACKAGE_VERSION }}
